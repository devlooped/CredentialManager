<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <AssemblyName>Devlooped.CredentialManager</AssemblyName>
    <RootNamespace>GitCredentialManager</RootNamespace>
    <PackageId>Devlooped.CredentialManager</PackageId>
    <PackageTags>cross-platform xplat credentials manager</PackageTags>
    <PackageProjectUrl>https://clarius.org/CredentialManager</PackageProjectUrl>
    <Description>
      Packages the Git Credential Manager cross-platform implementation for Windows, macOS and Linux for use as a generic credential store.

      Usage:

      var store = CredentialManager.Create("myapp");
    </Description>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="DotNetConfig" Version="1.2.0" />
    <PackageReference Include="NuGetizer" Version="1.2.3" PrivateAssets="all" />
    <PackageReference Include="ILRepack" Version="2.0.33" Pack="false" />
    <PackageReference Include="System.Security.Cryptography.ProtectedData" Version="8.0.0" />
    <PackageReference Include="System.Text.Json" Version="8.0.5" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Analyzers\Analyzers.csproj" ReferenceOutputAssembly="false" />
    <ProjectReference Include="..\Core\Core.csproj" Pack="false" />
  </ItemGroup>

  <Target Name="ILRepack" BeforeTargets="CopyFilesToOutputDirectory" Inputs="@(IntermediateAssembly -> '%(FullPath)')" Outputs="$(IntermediateOutputPath)ilrepack.txt" Returns="@(MergedAssemblies)" Condition="$(OS) == 'WINDOWS_NT' And Exists(@(IntermediateAssembly -> '%(FullPath)'))">
    <Message Text="Repacking" Importance="high" />
    <ItemGroup>
      <MergedAssemblies Include="@(ReferencePath)" Condition="'%(Extension)' == '.dll' And $([MSBuild]::ValueOrDefault('%(FileName)', '')) == 'Core'" />
    </ItemGroup>
    <PropertyGroup>
      <ILRepackArgs>$(ILRepackArgs) /out:"@(IntermediateAssembly -> '%(FullPath)')"</ILRepackArgs>
      <ILRepackArgs>$(ILRepackArgs) "@(IntermediateAssembly -> '%(FullPath)')"</ILRepackArgs>
      <ILRepackArgs>$(ILRepackArgs) @(MergedAssemblies -> '"%(FullPath)"', ' ')</ILRepackArgs>
    </PropertyGroup>
    <Exec Command="&quot;$(ILRepack)&quot; /internalize:exclude.txt $(ILRepackArgs)" StandardErrorImportance="high" StandardOutputImportance="low" ConsoleToMSBuild="true" ContinueOnError="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="ILRepackOutput" />
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Exec>
    <Message Importance="high" Text="$(ILRepackOutput)" Condition="'$(ExitCode)' != '0'" />
    <Delete Files="$(IntermediateOutputPath)ilrepack.txt" Condition="'$(ExitCode)' != '0'" />
    <Touch AlwaysCreate="true" Files="$(IntermediateOutputPath)ilrepack.txt" Condition="'$(ExitCode)' == '0'" />
    <Error Text="$(ILRepackOutput)" Condition="'$(ExitCode)' != '0' And '$(ContinueOnError)' != 'true'" />
    <ItemGroup>
      <MergedAssembliesToRemove Include="@(MergedAssemblies)" />
      <MergedAssembliesToRemove Remove="@(ReferenceToPreserve)" />
    </ItemGroup>
    <Delete Files="@(MergedAssembliesToRemove -> '$(MSBuildProjectDirectory)\$(OutputPath)%(Filename)%(Extension)')" Condition="Exists('$(MSBuildProjectDirectory)\$(OutputPath)%(Filename)%(Extension)')" />
  </Target>

</Project>
